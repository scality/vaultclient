#!/usr/bin/env node

'use strict'; // eslint-disable-line

const EOL = require('os').eol;
const fs = require('fs');
const homedir = require('os').homedir;
const path = require('path');
const program = require('commander');

const vaultclient = require('../index');

const version = require('../package.json').version;

const internalServiceAccountId = '000000000000';
const internalServiceAccountName = 'scality-internal-services';
const internalServiceAccountEmail = 'scality@internal';

program.version(version)
    .option('--host [HOST]', 'host where Vault is running (default to ' +
        'VAULT_HOST environment variable)')
    .option('--port [PORT]', 'port where Vault is running (default to ' +
        'VAULT_PORT environment variable)')
    .option('--https', 'use HTTPs instead of the default HTTP')
    .option('--cafile [FILE]', 'Authority certificate to use')
    .option('--noCaVerification', 'Allow untrusted certificate authority')
    .option('--config [PATH]', 'path where the configuration for ' +
        'vaultclient is (defaults to VAULT_CONFIG environment ' +
        'variable and ~/.vaultclient.conf in that order)');

function checkConfig(configObject) {
    if (!configObject) {
        throw new Error('invalid format');
    }
    if (!configObject.accessKey) {
        throw new Error('invalid access key');
    }
    if (!configObject.secretKeyValue) {
        throw new Error('invalid secret key value');
    }
}

function readConfigFile(configFilePath) {
    let actualPath = path.join(homedir(), '.vaultclient.conf');
    if (configFilePath) {
        actualPath = configFilePath;
    } else if (process.env.VAULT_CONFIG) {
        actualPath = process.env.VAULT_CONFIG;
    }
    try {
        const config = JSON.parse(fs.readFileSync(actualPath));
        checkConfig(config);
        return config;
    } catch (err) {
        throw new Error(`error reading config file: ${err}`);
    }
};

/**
 * Gets admin credentials via environment variables or via config file
 *
 * @param configFilePath - path to the admin config
 * @returns {object} - admin credentials
 */
function getAdminConfig(configFilePath) {
    if (process.env.ADMIN_ACCESS_KEY_ID && process.env.ADMIN_SECRET_ACCESS_KEY) {
        return {
            accessKey: process.env.ADMIN_ACCESS_KEY_ID,
            secretKeyValue: process.env.ADMIN_SECRET_ACCESS_KEY,
            sessionToken: process.env.ADMIN_SESSION_TOKEN, // token is optional
        };
    }
    return readConfigFile(configFilePath);
}

function action(cmd, fn, args) {
    if (typeof args !== 'object') {
        program.commands.find(c => c._name === cmd).outputHelp();
        process.exit(-1);
    }

    try {
        const useHttps = !!args.parent.https;
        const ca = args.parent.cafile ?
            fs.readFileSync(args.parent.cafile, 'ascii') : undefined;
        const untrusted = args.parent.noCaVerification ? true : false;
        const config = getAdminConfig(args.parent.config);
        const accessKey = config.accessKey;
        const secretKey = config.secretKeyValue;
        let host = args.parent.host || process.env.VAULT_HOST || 'localhost';
        const token = config.sessionToken;
        const client = new vaultclient.Client(host,
            Number.parseInt(args.parent.port ? args.parent.port :
                process.env.VAULT_PORT, 10),
            useHttps,
            undefined,
            undefined,
            ca,
            untrusted,
            accessKey,
            secretKey,
            null,
            null,
            token);
        fn(client, args);
    } catch (err) {
        //process.stderr.write(err.message + '\n');
        process.stderr.write(err + '\n');
        program.commands.find(c => c._name === cmd).outputHelp();
        process.exit(-1);
    }
}

function handleVaultResponse(err, data) {
    if (err) {
        process.stdout.write(JSON.stringify(err, null, 4) + '\n');
        process.exit(1);
    }
    if (process.stdout.write(JSON.stringify(data, null, 4) + '\n')) {
        process.exit(0);
    }
    process.stdout.on('drain', () => {
        process.exit(0);
    });
}

program
    .command('create-account')
    .option('--name <NAME>')
    .option('--email <EMAIL>')
    .option('--quota <Quota>', 'Maximum quota for the account', parseInt)
    .option('--accountid <ExternalAccountID>')
    .option('--canonicalid <ExternalCanonicalID>')
    .action(action.bind(null, 'create-account', (client, args) => {
        client.createAccount(
            args.name, {
            email: args.email,
            quota: args.quota || null,
            externalAccountId: args.accountid || null,
            externalCanonicalId: args.canonicalid || null
        },
            handleVaultResponse);
    }));

program
    .command('generate-account-password')
    .option('--name <NAME>')
    .option('--password <PASSOWRD>')
    .action(action.bind(null, 'generate-account-password', (client, args) => {
        client.generateAccountPassword(args.name, args.password, handleVaultResponse);
    }));

program
    .command('generate-account-access-key')
    .option('--name <NAME>')
    .option('--accesskey <ExternalAccessKey>')
    .option('--secretkey <ExternalSecretKey>')
    .option('--durationSeconds <DurationSeconds>', 'Duration in number of seconds')
    .action(action.bind(null, 'generate-account-access-key', (client, args) => {
        client.generateAccountAccessKey(args.name, handleVaultResponse, {
            externalAccessKey: args.accesskey || null,
            externalSecretKey: args.secretkey || null,
            durationSeconds: args.durationSeconds || null
        });
    }));

program
    .command('list-accounts')
    .option('--marker [MARKER]', 'Marker for pagination')
    .option('--maxItems [MAXITEMS]', 'Max items for pagination', parseInt)
    .option('--filterKey <string>', 'Filter for custom attributes')
    .option('--filterKeyStartsWith <string>', 'Generic filter for custom attributes')
    .action(action.bind(null, 'list-accounts', (client, args) => {
        client.listAccounts({
            marker: args.marker,
            maxItems: args.maxItems,
            filterKey: args.filterKey,
            filterKeyStartsWith: args.filterKeyStartsWith,
        }, handleVaultResponse);
    }));

program
    .command('get-account')
    .option('--account-arn <ARN>')
    .option('--account-name <Account Name>')
    .option('--account-id <ACCOUNT ID')
    .option('--canonical-id <CANONICAL ID>')
    .option('--email <EMAIL>')
    .action(action.bind(null, 'get-account', (client, args) => {
        client.getAccount({
            accountArn: args.accountArn || undefined,
            accountName: args.accountName || undefined,
            accountId: args.accountId || undefined,
            canonicalId: args.canonicalId || undefined,
            emailAddress: args.email || undefined,
        }, handleVaultResponse);
    }));

program
    .command('get-accounts')
    .option('--account-ids <ACCOUNT ID,ACCOUNT ID,...>')
    .option('--canonical-ids <CANONICAL ID,CANONICAL ID,...>')
    .option('--emails <EMAIL,EMAIL,...>')
    .action(action.bind(null, 'get-accounts', (client, args) => {
        client.enableIAMOnAdminRoutes().getAccounts(
            args.accountIds?.split(',') || null,
            args.canonicalIds?.split(',') || null,
            args.emails?.split(',') || null,
            {},
            handleVaultResponse,
        );
    }));

program
    .command('update-account-quota')
    .option('--quota <QUOTA>', 'Maximum quota for the account', parseInt)
    .option('--account-name <NAME>', 'Name of the account')
    .action(action.bind(null, 'update-account-quota', (client, args) => {
        client.updateAccountQuota(args.quota, {accountName: args.accountName || undefined}, handleVaultResponse);
    }));

program
    .command('delete-account-quota')
    .option('--account-name <NAME>', 'Name of the account')
    .action(action.bind(null, 'delete-account-quota', (client, args) => {
        client.deleteAccountQuota({accountName: args.accountName || undefined}, handleVaultResponse);
    }));

program
    .command('get-account-quota')
    .option('--account-name <NAME>', 'Name of the account')
    .action(action.bind(null, 'get-account-quota', (client, args) => {
        client.getAccountQuota({accountName: args.accountName || undefined}, handleVaultResponse);
    }));
program
    .command('add-account-attribute')
    .option('--account-name <string>')
    .option('--account-id <string>')
    .option('--account-arn <string>')
    .option('--canonical-id <string>')
    .option('--key <account attribute key | string>')
    .option('--value <account attribute value | string>')
    .action(action.bind(null, 'add-account-attribute', (client, args) => {
        client.addAccountAttribute({
            accountName: args.accountName || undefined,
            accountId: args.accountId || undefined,
            accountArn: args.accountArn || undefined,
            canonicalId: args.canonicalId || undefined,
            key: args.key || undefined,
            value: args.value || undefined,
        }, handleVaultResponse);
    }));

program
    .command('delete-account-attribute')
    .option('--account-name <string>')
    .option('--account-id <string>')
    .option('--account-arn <string>')
    .option('--canonical-id <string>')
    .option('--key <account attribute key | string>')
    .action(action.bind(null, 'delete-account-attribute', (client, args) => {
        client.deleteAccountAttribute({
            accountName: args.accountName || undefined,
            accountId: args.accountId || undefined,
            accountArn: args.accountArn || undefined,
            canonicalId: args.canonicalId || undefined,
            key: args.key || undefined,
        }, handleVaultResponse);
    }));


program
    .command('delete-account')
    .option('--name <NAME>')
    .action(action.bind(null, 'delete-account', (client, args) => {
        client.deleteAccount(args.name, handleVaultResponse);
    }));

program
    .command('ensure-internal-services-account')
    .option('--accesskey <AccessKey>')
    .option('--secretkey <SecretKey>')
    .action(action.bind(null, 'ensure-internal-management-account', (client, args) => {
        const ensureAccessKey = err => {
            if (err) {
                return handleVaultResponse(err);
            }
            const params = {
                externalAccessKey: args.accesskey,
                externalSecretKey: args.secretkey,
            };
            return client.generateAccountAccessKey(internalServiceAccountName,
                (err, data) => {
                    if (err && err.is.EntityAlreadyExists) {
                        return handleVaultResponse(null, data);
                    }
                    return handleVaultResponse(err, data);
                }, params);
        };

        client.getAccount({ accountId: internalServiceAccountId }, (err, data) => {
            if (!err) {
                if (data.name !== internalServiceAccountName || data.emailAddress !== internalServiceAccountEmail) {
                    return handleVaultResponse({
                        errorMessage: "An account already exists with id "+internalServiceAccountId,
                        existingAccount: data,
                    });
                }

                return ensureAccessKey();
            }

            if (err.is.NoSuchEntity) {
                return client.createAccount(
                    internalServiceAccountName, {
                        email: internalServiceAccountEmail,
                        externalAccountId: internalServiceAccountId,
                        disableSeed: true,
                    },
                    ensureAccessKey);
            }

            return handleVaultResponse(err);
        });
    }));

program
    .command('*')
    .action(() => {
        program.outputHelp();
        process.exit(-1);
    });

if (process.argv.length > 2) {
    program.parse(process.argv);
} else {
    program.outputHelp();
    process.exit(-1);
}
